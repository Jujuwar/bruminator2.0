<?php

namespace MatchBundle\Repository;

/**
 * MatchsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchsRepository extends \Doctrine\ORM\EntityRepository
{
    function findByTeam( $id, $ordered = false, $onlyThisEdition = false ) {
        $qb = $this->createQueryBuilder( 'm' );
        $qb->where( $qb->expr()->orX()
            ->add( 'm.attack = ?1' )
            ->add( 'm.defense = ?2' )
        );
        if( $onlyThisEdition ) {
            $qb->andWhere( 'm.date >= ?3' );
            $qb->andWhere( 'm.type != ?4' );
            $date = $this->getEntityManager()->getRepository( 'AdminBundle:Config' )->getOneBy( array( 'name' => 'inscription_end' ) );
            $qb->setParameter( '3', $date );
            $qb->setParameter( '4', 'Match de barrage' );
        }
        if( $ordered )
            $qb->orderBy( 'm.date ', 'DESC');
        $qb->setParameter( '1', $id );
        $qb->setParameter( '2', $id );

        return $qb->getQuery()->getResult();
    }

    function findByDate( \DateTime $time, $order = array(), $limit = null, $null = true, $withTime = false ) {
        $qb = $this->createQueryBuilder( 'm' );
        if( $null ) {
            $qb->where($qb->expr()->orX()
                ->add( 'm.date >= ?1' )
                ->add( 'm.date IS NULL' )
            );
        } else {
            $qb->where( 'm.date >= ?1' );
        }
        if( !empty( $order ) )
            $qb->orderBy( 'm.'.$order[ 'field' ], $order[ 'type' ] );

        if( $limit )
            $qb->setMaxResults( $limit );

        $qb->setParameter( '1', $time->format( $withTime ? 'Y-m-d H:i' : 'Y-m-d' ) );

        return $qb->getQuery()->getResult();
    }

    function findByDateInf( \DateTime $time, $order = array(), $limit = null, $null = true, $withTime = false ) {
        $qb = $this->createQueryBuilder( 'm' );
        if( $null ) {
            $qb->where($qb->expr()->orX()
                ->add( 'm.date <= ?1' )
                ->add( 'm.date IS NULL' )
            );
        } else {
            $qb->where( 'm.date <= ?1' );
        }
        if( !empty( $order ) )
            $qb->orderBy( 'm.'.$order[ 'field' ], $order[ 'type' ] );

        if( $limit )
            $qb->setMaxResults( $limit );

        $qb->setParameter( '1', $time->format( $withTime? 'Y-m-d H:i' : 'Y-m-d' ) );

        return $qb->getQuery()->getResult();
    }

    function findMatchsPhasesFinales() {
        $qb = $this->createQueryBuilder( 'm' );

        $qb->where($qb->expr()->orX()
            ->add( 'm.type = ?1' )
            ->add( 'm.type = ?2' )
            ->add( 'm.type = ?3' )
            ->add( 'm.type = ?4' )
        );

        $qb->orderBy( 'm.id' );

        $qb->setParameter( '1', 'Quart de finale' );
        $qb->setParameter( '2', 'Demi-finale' );
        $qb->setParameter( '3', 'Finale' );
        $qb->setParameter( '4', 'Petite finale' );

        return $qb->getQuery()->getResult();
    }

    function findMatchWithoutResult() {
        $qb = $this->createQueryBuilder( 'm' );

        $qb->leftJoin( 'm.matchResult', 'mr', 'mr.match = m.id' )
            ->where( 'mr.id IS NULL');

        return $qb->getQuery()->getResult();
    }

    function findMatchAfterBarrage() {
        $qb = $this->createQueryBuilder( 'm' );

        $qb->where('m.defense is null' );

        return $qb->getQuery()->getSingleResult();
    }
}
